#!/usr/bin/perl -w
#
# qpeek:  Peek into a job's output spool files
# Copyright 2006, 2007 Ohio Supercomputer Center
# Revision info:
# $HeadURL$
# $Revision$
# $Date$
#
# inspired by LSF bpeek
# 'live' job stdout will be on the 'mothersuperior' (the first execution host) 
# in a file like    /var/spool/torque/spool/1.pbshost.example.com.OU
# stderr will be in    "             "             "             .ER
# the user will want to see the entire file, 'watch' it (tail -f) without worrying 
# about its location
# it'd be nice if this feature was part of PBS itself...

use strict;
use warnings;
use Getopt::Std;
use PBS qw/pbs_connect pbs_statjob pbs_default pbs_disconnect/;
use Data::Dumper;

my %options;
getopt('a', \%options);
print "ARGV 0 is $ARGV[0]\n";

my $tool="cat";
my $numlines="";
my $suffix="OU";
my $spooldir;
my $pbsserver;
my $jobid=$ARGV[0];
my $jobname;
my $mothersuperior;
 
sub usage {
	print STDOUT <<EOF;
qpeek:  Peek into a job's output spool files

 Usage:  qpeek [options] JOBID

 Options:
   -c      Show all of the output file ("cat", default)
   -h      Show only the beginning of the output file ("head")
   -t      Show only the end of the output file ("tail")
   -f      Show only the end of the file and keep listening ("tail -f")
   -<num>f Show only the last <num> lines and keep listening ("tail -<num>f")
   +0f     Show all of the file and keep listening ("tail +0f")
   -#      Show only # lines of output ("tail -<num>")
   -e      Show the stderr file of the job
   -o      Show the stdout file of the job (default)
   -?      Display this help message
EOF
}

sub mothersuperior {
	my $execution_hosts;
	my $con=pbs_connect(pbs_default());
	my $status=pbs_statjob($con, $_[0], undef, undef) or die "Unable to stat PBS job $jobid";
	print Dumper($status);
	$jobname = $status{Job_Name};
	my @attribs = @{$status->[0]{attribs}} or die "can't set \@attribs!\n"; # we only get 1 status value back
	foreach my $hash_ref (@attribs) {
		$execution_hosts = $hash_ref->{value} if($hash_ref->{name} eq "exec_host");
	}
	$mothersuperior = (split(/\//, $execution_hosts))[0];
}

if (defined($ENV{"PBS_HOME"})) {
	$spooldir=$ENV{"PBS_HOME"};
} else {
	my @defaults=("/usr/spool/PBS",
		"/var/spool/pbs",
		"/var/torque",
		"/var/spool/torque",
		"/var/spool/batch/pbs",
		"/var/spool/batch/torque",
		"/var/spool/batch/pbs-piv",
		"/var/spool/batch/pbs-ipf",
		#~ ".",
		);
	foreach my $dir ( @defaults ) {
		if ( -d $dir ) {
			$spooldir=$dir;
			last;
		}
	}
}
die "Unable to find PBS spool directory!\n" if ( !defined($spooldir) );

#~ $pbsserver=`cat $spool/server_name` ||
#~ open(SERVERFH, '<', "$spooldir/server_name");
#~ chomp($pbsserver = <SERVERFH>);
#~ while (<SERVERFH>) {chomp (my $pbsserver=$_)} or die "Unable to find PBS server name!\n";

#~ $jobid = $ARGV[0] . "." . $pbsserver;
#~ print "\$jobid is $jobid\n";
# chop to magic pbs length
#~ $jobname =~ s/(.{11}).*/$1/;

my $node=&mothersuperior($jobid);
die "Job $jobid is not running!\n" if ( $node eq "" );

my $command="ssh -n $node $tool $numlines $spooldir/spool/$jobname.$suffix";
print "running $command\n";
exec $command;